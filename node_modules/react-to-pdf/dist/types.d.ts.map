{"mappings":";;;AAKA,sBAA6B;IAC3B,GAAG,EAAE,MAAM,GAAG,MAAM,CAAC;IACrB,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC;IACvB,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC;IACxB,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC;CACvB,CAAC;AAEF,6BAA6B;IAC3B,+CAA+C;IAC/C,MAAM,EAAE,cAAc,GAAG,MAAM,GAAG,MAAM,CAAC;IACzC,uDAAuD;IACvD,MAAM,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC/B,+EAA+E;IAC/E,WAAW,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;CAC1C,CAAC;AAEF,+BAA+B,IAAI,CACjC,SAAkB,EAClB,SAAS,GAAG,SAAS,CACtB,GAAG;IACF;;;;OAIG;IACH,QAAQ,EAAE,YAAY,GAAG,WAAW,CAAC;IACrC;;;OAGG;IACH,YAAY,EAAE,MAAM,CAAC;CACtB,CAAC;AAEF,yBAAgC;IAC9B;;;OAGG;IACH,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB;;;;OAIG;IACH,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC;IAClC;;;;;;OAMG;IACH,UAAU,EAAE,UAAU,GAAG,MAAM,CAAC;IAChC,mBAAmB;IACnB,IAAI,EAAE,qBAAqB,CAAC;IAC5B,qBAAqB;IACrB,MAAM,EAAE,uBAAuB,CAAC;IAChC,oEAAoE;IACpE,SAAS,EAAE;QACT;;;aAGK;QACL,GAAG,CAAC,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;QAC5B;;;aAGK;QACL,MAAM,CAAC,EAAE,OAAO,CAAC,SAAkB,CAAC,CAAC;KACtC,CAAC;CACH,CAAC;AAEF,sBAAsB,IAAI,CACxB,OAAO,CAAC,iBAAiB,CAAC,EAC1B,MAAM,GAAG,QAAQ,GAAG,WAAW,CAChC,GAAG;IACF,IAAI,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;IACtC,MAAM,CAAC,EAAE,OAAO,CAAC,uBAAuB,CAAC,CAAC;IAC1C,SAAS,CAAC,EAAE,OAAO,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;CACrD,CAAC;AAEF,oBAA2B;IACzB;;OAEG;IACH,SAAS,EAAE,iBAAiB,GAAG,CAAC,CAAC;IACjC;;OAEG;IACH,KAAK,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,KAAK,IAAI,CAAC;CACpC,CAAC;AAEF,2BACI,iBAAiB,GAAG,CAAC,GACrB,CAAC,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC;AC/F/B;IACE,GAAG,IAAI;IACP,MAAM,IAAI;IACV,MAAM,IAAI;IACV,IAAI,IAAI;IACR,OAAO,KAAK;CACb;AAED;IACE,IAAI,IAAI;IACR,KAAK,IAAI;IACT,MAAM,KAAK;IACX,KAAK,KAAK;CACX;AGED,OAAO,MAAM,yBAA0B,OAAO,KAAG,YAShD,CAAC;AAEF,QAAA,MAAM,WAAW,wBACM,mBAAmB,kBACxB,OAAO,KACtB,QAAQ,aAAa,YAAY,CAAC,CA6BpC,CAAC;AAEF,eAAe,WAAW,CAAC","sources":["src/src/types.ts","src/src/constants.ts","src/src/converter.ts","src/src/utils.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,"import { useRef, useCallback } from \"react\";\nimport html2canvas from \"html2canvas\";\n\nimport Converter from \"./converter\";\nimport { Options, TargetElementFinder, UsePDFResult } from \"./types\";\nimport { buildConvertOptions } from \"./utils\";\nimport jsPDF from \"jspdf\";\nexport { Resolution, Margin } from \"./constants\";\nexport type { Options };\n\nconst getTargetElement = (\n  targetRefOrFunction: TargetElementFinder\n): HTMLElement | null | undefined => {\n  if (typeof targetRefOrFunction === \"function\") {\n    return targetRefOrFunction();\n  }\n  return targetRefOrFunction?.current;\n};\n\nexport const usePDF = (usePDFoptions?: Options): UsePDFResult => {\n  const targetRef = useRef();\n  const toPDF = useCallback(\n    (toPDFoptions?: Options): Promise<InstanceType<typeof jsPDF>> => {\n      return generatePDF(targetRef, usePDFoptions ?? toPDFoptions);\n    },\n    [targetRef, usePDFoptions]\n  );\n  return { targetRef, toPDF };\n};\n\nconst generatePDF = async (\n  targetRefOrFunction: TargetElementFinder,\n  customOptions?: Options\n): Promise<InstanceType<typeof jsPDF>> => {\n  const options = buildConvertOptions(customOptions);\n  const targetElement = getTargetElement(targetRefOrFunction);\n  if (!targetElement) {\n    console.error(\"Unable to get the target element.\");\n    return;\n  }\n  const canvas = await html2canvas(targetElement, {\n    useCORS: options.canvas.useCORS,\n    logging: options.canvas.logging,\n    scale: options.resolution,\n    ...options.overrides?.canvas,\n  });\n  const converter = new Converter(canvas, options);\n  const pdf = converter.convert();\n  switch (options.method) {\n    case \"build\":\n      return pdf;\n    case \"open\": {\n      window.open(pdf.output(\"bloburl\"), \"_blank\");\n      return pdf;\n    }\n    case \"save\":\n    default: {\n      const pdfFilename = options.filename ?? `${new Date().getTime()}.pdf`;\n      await pdf.save(pdfFilename, { returnPromise: true });\n      return pdf;\n    }\n  }\n};\n\nexport default generatePDF;\n"],"names":[],"version":3,"file":"types.d.ts.map"}